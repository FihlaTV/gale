import sys, os
sys.path.insert(0, os.getcwd())

import packages
import cc

#
# Add options to be passed on to build.
#

options = [
    ('--prefix', 'prefix', 'Installation prefix.', '/usr/local'),
    ('--build-dir', 'build_dir', 'Sandbox location.', 'build'),
    ('--build-type', 'build_type', 'Build type (debug or optimised)', 'debug'),
    ('--static-libs', 'static_libs', 'Enable static libraries', 1, 'int'),
    ('--shared-libs', 'shared_libs', 'Enable shared libraries', 1, 'int'),
    ('--cc', 'CC', 'C compiler', None),
    ('--cflags', 'CFLAGS', 'Flags for the C compiler', None),
    ('--with-glucifer', 'with_glucifer', 'Enable gLucifer', 1, 'int')
]

#
# Setup the environment.
#

env = Environment(ENV=os.environ)
env.Tool('config', toolpath=['.'], options=options)

#
# Perform configuration.
#

if not (GetOption('help') or GetOption('clean')):

    if env.get('CC', None) is not None:
        cc.apply_cc(env, env['CC'])

    if env.get('build_type', None) == 'debug':
        env.MergeFlags('-g -DDEBUG')
    else:
        env.MergeFlags('-DNDEBUG')

env.ConfigurePackage(packages.libXML2)
env.ConfigurePackage(packages.MPI)
env.ConfigurePackage(packages.PETSc)
env.ConfigurePackage(packages.PETScExt, required=False)


#
# Export the environment.
#

if not (GetOption('help') or GetOption('clean')):

    out = open('config.cfg', 'w')
    opts = [o[1] for o in options] + [
        'CPPPATH', 'LIBPATH', 'RPATH', 'LIBS', 'CPPDEFINES'
        ]
    for o in opts:
        v = env.get(o, None)
        if v is not None:
            out.write('%s = %s\n'%(o, repr(env[o])))
    out.close()
