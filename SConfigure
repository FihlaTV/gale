import platform, os, sys
from config import Package, packages, cc

#
# Add options to be passed on to build.
#

options = [
    ('--prefix', 'prefix', 'Installation prefix. (currently disabled)', None),
    ('--build-dir', 'build_dir', 'Sandbox location.', 'build'),
    ('--with-debugging', 'with_debugging', 'Build with debugging', 1, 'int'),
    ('--with-warnings', 'with_warnings', 'Print all warnings at compile time', 1, 'int'),
    ('--lib-type', 'lib_type', 'Library type (shared or static)', 'shared'),
    ('--cc', 'CC', 'C compiler', None),
    ('--cflags', 'CFLAGS', 'Flags for the C compiler', None),
    ('--with-glucifer', 'with_glucifer', 'Enable gLucifer', 1, 'int'),
    ('--with-experimental', 'with_experimental', 'Enable Experimental Repository compile', os.path.isdir("Experimental"), 'int'),
    ('--with-osmesa', 'with_osmesa', 'Enable OSMesa output', 1, 'int'),
    ('--with-sdl', 'with_sdl', 'Enable SDL output', 1, 'int'),
    ('--with-x11', 'with_x11', 'Enable X11 output', 1, 'int'),
    ('--with-carbon', 'with_carbon', 'Enable Carbon output', 1, 'int'),
    ('--with-png', 'with_png', 'Enable PNG output', 1, 'int'),
    ('--with-jpeg', 'with_jpeg', 'Enable JPEG output', 1, 'int'),
    ('--with-fame', 'with_fame', 'Enable fame movie output', 1, 'int'),
    ('--eptiming', 'eptiming', 'Enable Entry point timings', 0, 'int'),
    ('--with-memory-stats', 'with_memory_stats', 'Enable detailed Stg Memory statistics', 0, 'int'),
    ('--with-cautious-mode', 'with_cautious_mode', 'Enable extra checking on heavily used functions', 0, 'int')
]

#
# Setup the environment.
#

env = Environment(ENV=os.environ)
env.Tool('config', toolpath=['config'], options=options)

#
# Declare which packages we're going to use.
#

env.UsePackage(packages.libXML2)
env.UsePackage(packages.PETScExt)
env.UsePackage(packages.HDF5)
env.UsePackage(packages.OSMesa)
env.UsePackage(packages.OpenGL)
env.UsePackage(packages.SDL)
env.UsePackage(packages.X11)
env.UsePackage(packages.Carbon)
env.UsePackage(packages.Cocoa)
env.UsePackage(packages.libPNG)
env.UsePackage(packages.libJPEG)
env.UsePackage(packages.libFAME)

#
# Perform configuration.
#

if not (GetOption('help') or GetOption('clean')):

    if env.get('CC', None) is not None:
        cc.apply_cc(env, env['CC'])

    # Switch off auto compilers if we were given one.
    if '--cc' in ARGUMENTS:
        env['packages'][packages.MPI].try_compilers = False

    if env.get('prefix', None) is None:
        env['prefix'] = env.GetLaunchDir()
    else:
	print("prefix specification is currently disabled.  you may use --build-dir as an alternative.");
	env.Exit()

    if env.get('eptiming', None):
        env.MergeFlags('-DENABLE_STGERMAIN_LOG')

    # confirm with_experimental configure
    if env.get('with_experimental', None):
        if os.path.isdir("Experimental"):
            print("Checking for Experimental... yes");
        else:
            print("Experimental not found");
            env.Exit()

    if env.get('with_memory_stats', None):
        env.MergeFlags('-DMEMORY_STATS')

    if env.get('with_cautious_mode', None):
        env.MergeFlags('-DCAUTIOUS')

    if env.get('with_debugging', None):
        env.MergeFlags('-g -DDEBUG')
    else:
        env.MergeFlags('-O3 -DNDEBUG')

    env['save_vars'] += ['shared_libs', 'static_libs']
    if env.get('lib_type', None) == 'shared':
        env['shared_libs'] = 1
        env['static_libs'] = 0
    elif env.get('lib_type', None) == 'static':
        env['shared_libs'] = 0
        env['static_libs'] = 1
        #env.MergeFlags('-static')
	#env.AppendUnique(LINKFLAGS=['-static'])
	Package.static = True
    else:
        print 'Invalid option \'--lib-type\''
        sys.exit()

    env.ConfigurePackage(packages.libXML2)
    env.ConfigurePackage(packages.MPI)
    env.ConfigurePackage(packages.HDF5, required=False)

    # If we're building with gLucifer then we need some more
    # packages.
    if env.get('with_glucifer', None):

        # Try for OSMesa first on *nix systems.
        osm = 0
        if platform.system() != 'Darwin' and env.get('with_osmesa'):
            osm = env.ConfigurePackage(packages.OSMesa, required=False).result

        # If not, go for OpenGL.
        if not osm:
            res = env.ConfigurePackage(packages.OpenGL).result
            if not res:
                print
                print 'Need either OSMesa or OpenGL in order to use gLucifer'
                print 'but neither could be found.'
                print 'Details in \'config/config2/config.log\''
                print
                env.Exit()

        # Need an extra CPPDEFINE for gLucifer.
        env.AppendUnique(CPPDEFINES=['HAVE_GL'])

        # If we're on Darwin go for a native windowing system first.
        res = osm;  #Use osmesa for windowing if found
        if not res and platform.system() == 'Darwin' and env.get('with_carbon'):
            res = env.ConfigurePackage(packages.Carbon, required=False).result

        # Then SDL. SDL is always compatible with others, so allow configure regardless
        #if not res: 
        #    res = env.ConfigurePackage(packages.SDL, required=False).result
        sdl = 0
        if env.get('with_sdl'):
            sdl = env.ConfigurePackage(packages.SDL, required=False).result

         # Then X11.
        if not res:
            if env.get('with_x11'):
                res = env.ConfigurePackage(packages.X11, required=False).result
            if not (res or sdl):
                print
                print 'Need a windowing system for gLucifer, one of either SDL,'
                print 'X11, Carbon or OSMesa. None of these could be found.'
                print 'Details in \'config/config2/config.log\''
                print
                env.Exit()

        # Add auxilliary gLucifer packages.
        if env.get('with_png'):
            env.ConfigurePackage(packages.libPNG, required=False)
        if env.get('with_jpeg'):
            env.ConfigurePackage(packages.libJPEG, required=False)
        if env.get('with_fame'):
            env.ConfigurePackage(packages.libFAME, required=False)

    env.ConfigurePackage(packages.PETSc)
    env.ConfigurePackage(packages.PETScExt, required=False)

    # enable all warnings.
    if env.get('with_warnings', None):    
	env.MergeFlags('-Wall')
    if env.get('CC', None) == 'icc':
        env.MergeFlags('-wd869 -wd1419')



#
# Export the environment.
#

env.PrintSummary()
env.SaveConfig()

#
# Print success message.
#

print
print '***************************************'
print '* Successfully configured.            *'
print '* Now run \'./scons.py\' to build.      *'
print '***************************************'
print
