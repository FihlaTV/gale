Linux
-----

First build mpich.  Get the tarball

  mpich2-1.3.2p1.tar.gz

from the buildbots.  Configure with

  ./configure --prefix=$HOME --with-pm=gforker --enable-fast --disable-f77 --disable-fc

Set your path

  export PATH=$HOME/bin:$PATH

Next, get hdf5

  hdf5-1.8.7.tar.gz

Configure with

  ./configure --enable-parallel --enable-production --enable-shared=no --prefix=$HOME CC=mpicc

Then get Petsc 3.2-p7 and configure with

  ./configure --with-fortran=0 --with-x=0 --download-f2cblaslapack=1 --with-shared-libraries=0 --with-debugging=0

Next is Gale.  Gale uses dgesv_ from lapack.  The downloaded
c-blas-lapack library may define it as "dgesv" or "dgesv_".  You can
check it with the command

  nm $PETSC_DIR/$PETSC_ARCH/lib/libf2clapack.a | grep dgesv

If it uses dgesv_, then configure Gale with

  ./configure.sh --with-debugging=0 --hdf5-dir=$HOME

Otherwise, use

  ./configure.sh --with-debugging=0 --hdf5-dir=$HOME --cxxflags='-Ddgesv_=dgesv'

The final link will fail because it can not find lapack and blas.  Add
"f2clapack" and "f2cblas" to the list of libraries.

The Gale executable will still pull in shared versions of libxml2.
Copy the final link line, remove the -lxml2 flag, and add

  /usr/lib/libxml2.a /usr/lib/libz.a -ldl

at the end.  You also need to staticly link libstdc++.  Symlink the
static libstdc++ into the build directory with the command

  ln -s `mpicxx -print-file-name=libstdc++.a` build/lib/

Then strip the executable.  Running ldd on the executable on a 64 bit
system gives

$ ldd build/bin/Gale 
	linux-vdso.so.1 =>  (0x00007fffaddfe000)
	libm.so.6 => /lib/libm.so.6 (0x00007f42fbca9000)
	libdl.so.2 => /lib/libdl.so.2 (0x00007f42fbaa5000)
	libpthread.so.0 => /lib/libpthread.so.0 (0x00007f42fb889000)
	librt.so.1 => /lib/librt.so.1 (0x00007f42fb680000)
	libc.so.6 => /lib/libc.so.6 (0x00007f42fb31e000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f42fbf2a000)

which are all libaries provided by the kernel.



MAC
---

export MACOSX_DEPLOYMENT_TARGET=10.5
export PATH=/Users/walter/src/mpich-bin/bin:$PATH
export PETSC_DIR=/Users/walter/src/petsc-3.2-p7
export PETSC_ARCH=arch-darwin-c-opt
export CC=mpicc
export CXX=mpicxx

To build a version on 10.6 that works for both 10.5 and 10.6,
configure HDF5 with

  ./configure --enable-parallel --enable-production --enable-shared=no --prefix=/Users/walter/src/hdf5-bin CFLAGS="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk" LDFLAGS="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk"

When configuring Petsc,

  ./configure --with-fortran=0 --with-x=0 --with-shared-libraries=0 --with-debugging=0 --CFLAGS="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk" --LDFLAGS="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk"

and when configuring Gale

  ./configure.sh --cxx=/Users/walter/src/mpich-bin/bin/mpicxx --with-debugging=0 --hdf5-dir=/Users/walter/src/hdf5-bin --cxxflags="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk" --linkflags="-mmacosx-version-min=10.5 -isysroot /Developer/SDKs/MacOSX10.5.sdk"

When linking Gale, it will not find lapack, blas, and libz functions.
So add 'lapack, 'blas' and 'z' to the list of libaries in config.cfg.
Running

  otool -L build/bin/Gale

should show libraries only in /usr/lib and /System/Library.

Windows
-------

Install the libxml2-dev, lapack-dev, libhdf5-dev packages.  Configure
mpich and Gale the same as in Linux.  Configure Petsc with

  ./configure --with-fortran=0 --with-x=0 --with-shared-libraries=0 --with-debugging=0 --with-windows-graphics=0

In the end, you will have to copy a number of dll's.  Run ldd on
Gale.exe and copy all of the dll's not in the Windows directory.



