/*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
**
** Copyright (C), 2003, Victorian Partnership for Advanced Computing (VPAC) Ltd, 110 Victoria Street, Melbourne, 3053, Australia.
**
** Authors:
**   Stevan M. Quenette, Senior Software Engineer, VPAC. (steve@vpac.org)
**   Patrick D. Sunter, Software Engineer, VPAC. (pds@vpac.org)
**   Luke J. Hodkinson, Computational Engineer, VPAC. (lhodkins@vpac.org)
**   Siew-Ching Tan, Software Engineer, VPAC. (siew@vpac.org)
**   Alan H. Lo, Computational Engineer, VPAC. (alan@vpac.org)
**   Raquibul Hassan, Computational Engineer, VPAC. (raq@vpac.org)
**
**  This library is free software; you can redistribute it and/or
**  modify it under the terms of the GNU Lesser General Public
**  License as published by the Free Software Foundation; either
**  version 2.1 of the License, or (at your option) any later version.
**
**  This library is distributed in the hope that it will be useful,
**  but WITHOUT ANY WARRANTY; without even the implied warranty of
**  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
**  Lesser General Public License for more details.
**
**  You should have received a copy of the GNU Lesser General Public
**  License along with this library; if not, write to the Free Software
**  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
**
** Role:
**	Tests that particles can be saved to file, then re-loaded onto a new context with exactly
**	the same positions and values.
**
** $Id: testTemplate.c 3462 2006-02-19 06:53:24Z WalterLandry $
**
**~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/

#include <stdio.h>
#include <stdlib.h>

#include "pcu/pcu.h"
#include <StGermain/StGermain.h>
#include "StgDomain/Geometry/Geometry.h"
#include "StgDomain/Shape/Shape.h"
#include "StgDomain/Mesh/Mesh.h"
#include "StgDomain/Utils/Utils.h"
#include "StgDomain/Swarm/Swarm.h"

#include "SwarmDumpAndLoadSuite.h"

#define CURR_MODULE_NAME "DomainContext.c"

struct _Particle {
	__GlobalParticle
	Coord		xi;
	unsigned	testValue;
};

typedef struct {
	MPI_Comm comm;
	unsigned rank;
	unsigned nProcs;
} SwarmDumpAndLoadSuiteData;

void SwarmDumpAndLoadSuite_UpdateParticlePositionsTowardsAttractor( DomainContext* context );
double SwarmDumpAndLoadSuite_Dt( void* context ) {
   return 2.0;
}

void SwarmDumpAndLoadSuite_Setup( SwarmDumpAndLoadSuiteData* data ) {
	/* MPI Initializations */
	data->comm = MPI_COMM_WORLD;  
	MPI_Comm_rank( data->comm, &data->rank );
	MPI_Comm_size( data->comm, &data->nProcs );
}

void SwarmDumpAndLoadSuite_Teardown( SwarmDumpAndLoadSuiteData* data ) {
}

void SwarmDumpAndLoadSuite_TestSwarmLoad( SwarmDumpAndLoadSuiteData* data ) {
	int							procToWatch;
	Swarm*						swarm;
	Swarm*						newSwarm = NULL;
	Swarm*						swarmList[1];
	SwarmDump*					swarmDumper = NULL;
	DomainContext*				context;
	Dictionary*					dictionary;
	Stg_ComponentFactory*	cf;
	Stream*						stream;
	char							input_file[PCU_PATH_MAX];
	
	procToWatch = data->nProcs > 1 ? 1 : 0;

	if( data->rank == procToWatch ) {
		stream = Journal_Register (Info_Type, "SwarmLoadStream");

		Journal_Enable_TypedStream( DebugStream_Type, False );
		Stream_EnableBranch( Swarm_Debug, False );

		Stream_Enable( Journal_Register( Info_Type, ParticleCommHandler_Type ), False );
		Stream_Enable( Journal_Register( Info_Type, SwarmDump_Type ), False );

		pcu_filename_input( "testSwarmLoad.xml", input_file );
		cf = stgMainInitFromXML( input_file, data->comm, NULL );
		context = (DomainContext*) LiveComponentRegister_Get( cf->LCRegister, "context" );

		dictionary = context->dictionary;

		swarm = (Swarm*) LiveComponentRegister_Get( context->CF->LCRegister, "swarm" );

		stgMainBuildAndInitialise( cf );
	
		stgMainDestroy( cf );	
	}
}

void SwarmDumpAndLoadSuite_TestSwarmDump( SwarmDumpAndLoadSuiteData* data ) {
	int							procToWatch;
	Swarm*						swarm;
	Swarm*						newSwarm = NULL;
	Swarm*						swarmList[1];
	SwarmDump*					swarmDumper = NULL;
	DomainContext*				context;
	Dictionary*					dictionary;
	Stg_ComponentFactory*	cf;
	Stream*						stream;
	FileParticleLayout*		fileParticleLayout = NULL;
	char							input_file[PCU_PATH_MAX];
	char							output_file[PCU_PATH_MAX];
	
	procToWatch = data->nProcs > 1 ? 1 : 0;

	if( data->rank == procToWatch ) {
		stream = Journal_Register (Info_Type, "SwarmDumpStream");

		Journal_Enable_TypedStream( DebugStream_Type, False );
		Stream_EnableBranch( Swarm_Debug, False );

		Stream_Enable( Journal_Register( Info_Type, ParticleCommHandler_Type ), False );
		Stream_Enable( Journal_Register( Info_Type, SwarmDump_Type ), False );

		pcu_filename_input( "testSwarmDump.xml", input_file );
		cf = stgMainInitFromXML( input_file, data->comm, NULL );
		context = (DomainContext*) LiveComponentRegister_Get( cf->LCRegister, "context" );

		dictionary = context->dictionary;

		swarm = (Swarm*) LiveComponentRegister_Get( context->CF->LCRegister, "swarm" );

		stgMainBuildAndInitialise( cf );
	
		ContextEP_ReplaceAll( context, AbstractContext_EP_Dt, SwarmDumpAndLoadSuite_Dt );
		ContextEP_ReplaceAll( context, AbstractContext_EP_Step, SwarmDumpAndLoadSuite_UpdateParticlePositionsTowardsAttractor );

		Stg_Component_Execute( context, 0, False );
   	Stg_Component_Destroy( context, 0, False );

		swarmList[0] = swarm;
		swarmDumper = SwarmDump_New( "SwarmDumpSuiteDumper", context, swarmList, 1, True );
		SwarmDump_Execute( swarmDumper, context );
		/*
#ifdef READ_HDF5
		sprintf( output_file, "%s/%s.%05d", context->outputPath, swarm->name, context->timeStep );
#else
		sprintf( output_file, "%s/%s.%05d.dat", context->outputPath, swarm->name, context->timeStep );
#endif
		
		fileParticleLayout = FileParticleLayout_New( "fileParticleLayout", output_file );
		Stg_Component_Construct( fileParticleLayout, cf, 0, False );
		Stg_Component_Build( fileParticleLayout, 0, False );
		Stg_Component_Initialise( fileParticleLayout, 0, False );
		fileParticleLayout->checkpointnfiles = 1;

		newSwarm = Swarm_New( "testSwarm2", (ElementCellLayout*) LiveComponentRegister_Get( context->CF->LCRegister, "elementCellLayout" ),
			 fileParticleLayout, 3, sizeof(Particle), extensionMgr_Register, NULL, data->comm, NULL );

		newSwarm->swarmVariable_Register = swarm->swarmVariable_Register;

		Stg_Component_Build( newSwarm, 0, False );
		Stg_Component_Initialise( newSwarm, 0, False );
		*/
		stgMainDestroy( cf );
	}
}

void SwarmDumpAndLoadSuite( pcu_suite_t* suite ) {
	pcu_suite_setData( suite, SwarmDumpAndLoadSuiteData );
	pcu_suite_setFixtures( suite, SwarmDumpAndLoadSuite_Setup, SwarmDumpAndLoadSuite_Teardown );
	pcu_suite_addTest( suite, SwarmDumpAndLoadSuite_TestSwarmDump );
	pcu_suite_addTest( suite, SwarmDumpAndLoadSuite_TestSwarmLoad );
}

void SwarmDumpAndLoadSuite_UpdateParticlePositionsTowardsAttractor( DomainContext* context ) {
	Cell_LocalIndex		lCell_I;
	Particle_InCellIndex	cParticle_I;
	Particle*				currParticle;
	Index						dim_I;
	Mesh*						mesh = (Mesh*) LiveComponentRegister_Get( context->CF->LCRegister, "mesh-linear" );
	Swarm*					swarm = (Swarm*) LiveComponentRegister_Get( context->CF->LCRegister, "swarm" );
	Stream*					stream = Journal_Register( Info_Type, "updateParticlePositions" );
	Coord						attractorPoint;
	double					minCrds[3], maxCrds[3];

	Mesh_GetGlobalCoordRange( mesh, minCrds, maxCrds );

	for ( dim_I=0; dim_I < 3; dim_I++ ) 
		attractorPoint[dim_I] = ( maxCrds[dim_I] - minCrds[dim_I] ) / 3;

	for ( lCell_I=0; lCell_I < swarm->cellLocalCount; lCell_I++ ) {
		/*Journal_Printf( stream, "\tUpdating Particles positions in local cell %d:\n", lCell_I );*/
		for ( cParticle_I=0; cParticle_I < swarm->cellParticleCountTbl[lCell_I]; cParticle_I++ ) {
			Coord movementVector = {0,0,0};
			Coord newParticleCoord = {0,0,0};
			Coord* oldCoord;

			currParticle = (Particle*)Swarm_ParticleInCellAt( swarm, lCell_I, cParticle_I );
			oldCoord = &currParticle->coord;
			/*Journal_Printf( stream, "\t\tUpdating particleInCell %d:\n", cParticle_I );*/

			for ( dim_I=0; dim_I < 3; dim_I++ ) {
				movementVector[dim_I] = ( attractorPoint[dim_I] - (*oldCoord)[dim_I] ) / 3;
				newParticleCoord[dim_I] = (*oldCoord)[dim_I] + movementVector[dim_I];
			}

			/*Journal_Printf( stream, "\t\tChanging its coords from (%f,%f,%f) to (%f,%f,%f):\n",
					(*oldCoord)[0], (*oldCoord)[1], (*oldCoord)[2],
					newParticleCoord[0], newParticleCoord[1], newParticleCoord[2] );*/

			for ( dim_I=0; dim_I < 3; dim_I++ ) {
				currParticle->coord[dim_I] = newParticleCoord[dim_I];
			}
		}
	}
}
